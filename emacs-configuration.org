#+TITLE: ivvil's emacs config

* Introduction
This configuration file contains setup of Emacs packages for Language Server Protocol (LSP). I will use ~use-package~ for package management.
* Setup
Since this is an org file, I am using ~org-babel-load-file~ command to load this file from [[init.el]] file. Emacs loads [[init.el]] when it starts. I have setup a variable called ~EMACS_DIR~ to point to *.emacs.d* as the setup directory. Adjust it to match your system. To speed up loading time of emacs, I have used ~gc-cons-threshold~ and ~gc-cons-percentage~ variables, before and after loading this configuration file. I have set ~gc-cons-threshold~ value to 300 mb after startup. Adjust it to comfortable value according to memory in your system. ~lsp-java~ package however has ~1GB~ setup as default.
  
** Setup repository in org file
In the following code block, we will initialize package repositories and after that install ~use-package~. This package is used to install other packages.

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
						   ("elpa" . "https://elpa.gnu.org/packages/")
						   ("org" . "https://orgmode.org/elpa/")
						   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
						   ))

  (package-initialize)
										  ; Fetch the list of packages available 
  (unless package-archive-contents (package-refresh-contents))

										  ; Install use-package
  (setq package-list '(use-package))
  (dolist (package package-list)
	(unless (package-installed-p package) (package-install package)))

#+END_SRC

** Environment Setup
In some operating systems Emacs does not load environment variables properly. Therefore, below we install a package called ~exec-path-from-shell~ and initialize it.

 #+begin_src emacs-lisp
   ;; (use-package exec-path-from-shell :ensure t)
   ;; (exec-path-from-shell-initialize)
 #+end_src

** Operating System specific variable setup
   Since we want to use same emacs configuration for each of our operating systems, we want to separate values that are different between different operating systems. In my setup, I have different values for ~JAVA_HOME~ in my linux.el and mac.el. Adjust these values accordingly for your setup if you are using different versions of Java. Following code loads mac.el, linux.el or windows.el based on where you run this configuration.

#+BEGIN_SRC emacs-lisp
 ;; Load platform specific variables using specific files. E.g. linux.el. 
 ;; Make necessary changes as needed
 (cond ((eq system-type 'windows-nt) (load (concat EMACS_DIR "windows")))
 ((eq system-type 'gnu/linux) (load (concat EMACS_DIR "linux")))
 ((eq system-type 'darwin) (load (concat EMACS_DIR "mac")))
 (t (load-library "default")))
 #+END_SRC

** Basic setup

Here, I add some basic emacs setup like loading the language, disabling the toolbar, setting up backup directory etc. I have added comments to each setting.

#+BEGIN_SRC emacs-lisp
  ;; Disable annoying ring-bell when backspace key is pressed in certain situations
  (setq ring-bell-function 'ignore)

  ;; Disable scrollbar and toolbar
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

  ;; Set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;; Longer whitespace, otherwise syntax highlighting is limited to default column
  (setq whitespace-line-column 1000) 

  ;; Enable soft-wrap
  (global-visual-line-mode 1)

  ;; Maintain a list of recent files opened
  (recentf-mode 1)            
  (setq recentf-max-saved-items 50)

  ;; Move all the backup files to specific cache directory
  ;; This way you won't have annoying temporary files starting with ~(tilde) in each directory
  ;; Following setting will move temporary files to specific folders inside cache directory in EMACS_DIR

  (setq user-cache-directory (concat EMACS_DIR "cache"))
  (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
		url-history-file (expand-file-name "url/history" user-cache-directory)
		auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
		projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))

  ;; Org-mode issue with src block not expanding
  ;; This is a fix for bug in org-mode where <s TAB does not expand SRC block
  (when (version<= "9.2" (org-version))
	(require 'org-tempo))

  ;; Coding specific setting

  ;; Automatically add ending brackets and braces
  (electric-pair-mode 1)

  ;; Make sure tab-width is 4 and not 8
  (setq-default tab-width 4)

  ;; Highlight matching brackets and braces
  (show-paren-mode 1)

  ;; Disable default startup buffer
  (setq inhibit-startup-screen t)

  ;; Enable disabled comands
  (setq disabled-command-function nil)

  ;; Add other elisp files to ~load-path~
  (defun add-subdirectories-to-load-path (directory)
	"Add subdirectories of DIRECTORY to the `load-path`."
	(interactive "Directory: ")
	(let ((default-directory (file-name-as-directory directory)))
	  (dolist (subdir (directory-files directory t "^[^.]" 'nosort))
		(when (file-directory-p subdir)
		  (add-to-list 'load-path subdir)))))

  (add-subdirectories-to-load-path "~/.emacs.d/elisp")

  ;; Highlight todos
  (use-package hl-todo
	:ensure t
	:init (global-hl-todo-mode))
#+END_SRC

** Emacs dashboard

#+begin_src emacs-lisp
  ;; use-package with package.el:
  (use-package dashboard
	:ensure t
	:config
	(dashboard-setup-startup-hook)
	(setq dashboard-projects-backend 'projectile))
  (setq dashboard-display-icons-p t) ;; display icons on both GUI and terminal
  ;; (setq dashboard-icon-type 'nerd-icons) ;; use `nerd-icons' package
  (setq dashboard-icon-type 'all-the-icons) ;; use `all-the-icons' package
  ;; (setq dashboard-set-heading-icons t)
  ;; (setq dashboard-set-file-icons t)

  (setq dashboard-startup-banner 'logo)
  ;; Value can be
  ;; - nil to display no banner
  ;; - 'official which displays the official emacs logo
  ;; - 'logo which displays an alternative emacs logo
  ;; - 1, 2 or 3 which displays one of the text banners
  ;; - "path/to/your/image.gif", "path/to/your/image.png", "path/to/your/text.txt" or "path/to/your/image.xbm" which displays whatever gif/image/text/xbm you would prefer
  ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

  (setq dashboard-items '((recents  . 5)
						  (bookmarks . 5)
						  (projects . 5)
						  (agenda . 5)
						  (registers . 5)))

  (setq dashboard-startupify-list '(dashboard-insert-banner
									dashboard-insert-newline
									dashboard-insert-banner-title
									dashboard-insert-newline
									dashboard-insert-navigator
									dashboard-insert-newline
									dashboard-insert-init-info
									dashboard-insert-items
									dashboard-insert-newline
									dashboard-insert-footer))
#+end_src

*** Page break lines

#+begin_src emacs-lisp
  (use-package page-break-lines :ensure t)
#+end_src

*** All the icons

#+begin_src emacs-lisp
  (use-package all-the-icons
	:if (display-graphic-p) :ensure t)
  (use-package all-the-icons-dired :ensure t)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

*** Nerd icons

#+begin_src emacs-lisp
  ;; (use-package nerd-icons
  ;;   ;; :custom
  ;;   ;; The Nerd Font you want to use in GUI
  ;;   ;; "Symbols Nerd Font Mono" is the default and is recommended
  ;;   ;; but you can use any other Nerd Font if you want
  ;;   ;; (nerd-icons-font-family "Symbols Nerd Font Mono")
  ;;   :ensure t
  ;;   )
#+end_src



** Other packages for the config

#+begin_src emacs-lisp
  ;; (use-package s
  ;;   :ensure t)
  ;; (require 'which-linux-distribution)
#+end_src

* Looks

** Font

#+begin_src emacs-lisp 
(set-face-attribute 'default nil :font "CaskaydiaCove Nerd Font-10")
(set-frame-font "CaskaydiaCove Nerd Font-10" nil t)
#+end_src

** Theme
   I tend to like *doom-themes* package. Below we will install doom theme. In addition, I will also install a package called *heaven-and-hell*. This allows us to toggle between two themes using a shortcut key. I will assign ~F6~ key to toggling the theme and ~C-c F6~ to set to default theme.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
	:ensure t 
	:init 
	(load-theme 'doom-palenight t))

  (use-package solo-jazz-theme
	:ensure t)

  (use-package heaven-and-hell
	:ensure t
	:init
	(setq heaven-and-hell-theme-type 'dark)
	(setq heaven-and-hell-themes
		  '((light . doom-solarized-light)
			(dark . doom-solarized-dark-high-contrast)))
	:hook (after-init . heaven-and-hell-init-hook)
	:bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
		   ("<f6>" . heaven-and-hell-toggle-theme)))

#+END_SRC

If you press F6 key in your keyboard, it should switch between doom-palenight and doom-acario-light themes. If you want to go back to the default theme press ~Ctrl + C and F6~.

** Disable ansi color in compilation mode
   This will help eliminate weird escape sequences during compilation of projects.
   #+begin_src emacs-lisp

   (defun my/ansi-colorize-buffer ()
   (let ((buffer-read-only nil))
   (ansi-color-apply-on-region (point-min) (point-max))))
   
   (use-package ansi-color
   :ensure t
   :config
   (add-hook 'compilation-filter-hook 'my/ansi-colorize-buffer)
   )
   #+end_src

** Code ligatures

#+begin_src emacs-lisp
  (use-package ligature
    :ensure t
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia and Fira Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode
  						  '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
  							;; =:= =!=
  							("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
  							;; ;; ;;;
  							(";" (rx (+ ";")))
  							;; && &&&
  							("&" (rx (+ "&")))
  							;; !! !!! !. !: !!. != !== !~
  							("!" (rx (+ (or "=" "!" "\." ":" "~"))))
  							;; ?? ??? ?:  ?=  ?.
  							("?" (rx (or ":" "=" "\." (+ "?"))))
  							;; %% %%%
  							("%" (rx (+ "%")))
  							;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
  							;; |->>-||-<<-| |- |== ||=||
  							;; |==>>==<<==<=>==//==/=!==:===>
  							("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
  											"-" "=" ))))
  							;; \\ \\\ \/
  							("\\" (rx (or "/" (+ "\\"))))
  							;; ++ +++ ++++ +>
  							("+" (rx (or ">" (+ "+"))))
  							;; :: ::: :::: :> :< := :// ::=
  							(":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
  							;; // /// //// /\ /* /> /===:===!=//===>>==>==/
  							("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
  											"="))))
  							;; .. ... .... .= .- .? ..= ..<
  							("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
  							;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
  							("-" (rx (+ (or ">" "<" "|" "~" "-"))))
  							;; *> */ *)  ** *** ****
  							("*" (rx (or ">" "/" ")" (+ "*"))))
  							;; www wwww
  							("w" (rx (+ "w")))
  							;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
  							;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
  							;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
  							;; << <<< <<<<
  							("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
  											"-"  "/" "|" "="))))
  							;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
  							;; >> >>> >>>>
  							(">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
  							;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
  							("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
  										 (+ "#"))))
  							;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
  							("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
  							;; __ ___ ____ _|_ __|____|_
  							("_" (rx (+ (or "_" "|"))))
  							;; Fira code: 0xFF 0x12
  							;; ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
  							;; Fira code:
  							;; "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
  							;; The few not covered by the regexps.
  							"{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

** Doom modeline

#+begin_src emacs-lisp 
  (use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode))
#+end_src

** Rainbow delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
	:ensure t
	:hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Page break lines

#+begin_src emacs-lisp 
  (use-package page-break-lines
	:ensure t
	:init (global-page-break-lines-mode))
#+end_src

** Solaire

#+begin_src emacs-lisp 
  ;; (use-package solaire-mode
  ;;   :ensure t
  ;;   :init (solaire-global-mode +1))
#+end_src

* Custom Packages
  In this section we will install some of the packages that we will use for various project and file management.

** Key-Chord
   Key-Chord allows us to bind regular keyboard keys for various commands without having to use prefix keys such as Ctrl, Alt or Super etc.

#+begin_src emacs-lisp
  (use-package use-package-chords
	:ensure t
	:init 
	:config (key-chord-mode 1)
	(setq key-chord-two-keys-delay 0.4)
	(setq key-chord-one-key-delay 0.5) ; default 0.2
	)
#+end_src
Here, we changed the delay for the consecutive key to be little higher than default. Adjust this to what you feel comfortable.

** Projectile
   Projectile helps us with easy navigation within a project. Projectile recognizes several source control managed folders e.g *git, mercurial, maven, sbt*, and a folder with empty *.projectile* file. You can use ~C-c p~ to invoke any projectile command. This is a very useful key to remember.

#+begin_src emacs-lisp
(use-package projectile 
:ensure t
:init (projectile-mode +1)
:config 
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
)   
#+end_src

** Helm
Helm allows for easy completion of commands. Below, we will replace several of the built in functions with helm versions and add keyboard shortcuts for couple of new useful commands.

#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:init 
(helm-mode 1)
(progn (setq helm-buffers-fuzzy-matching t))
:bind
(("C-c h" . helm-command-prefix))
(("M-x" . helm-M-x))
(("C-x C-f" . helm-find-files))
(("C-x b" . helm-buffers-list))
(("C-c b" . helm-bookmarks))
(("C-c f" . helm-recentf))   ;; Add new key to recentf
(("C-c g" . helm-grep-do-git-grep)))  ;; Search using grep in a git project
#+END_SRC

I want to point out, couple of interesting things from above setup. Just like we added ~C-c p~ as a prefix for projectile, here we added ~C-c h~ for helm. We also enabled fuzzy matching, so that your search text don't need to be very strict. Also, I added ~C-c g~ to helm-grep-do-git-grep. I can search files with specific text within a git project (make sure to commit it first).

*** Helm Descbinds
Helm descbinds helps to easily search for keyboard shortcuts for modes that are currently active in the project. This can be helpful to discover keyboard shortcuts to various commands. Use ~C-h b~ to bring up helm-descbinds window.

#+begin_src emacs-lisp
(use-package helm-descbinds
:ensure t
:bind ("C-h b" . helm-descbinds))
#+end_src

E.g. In helm-descbinds window you could type "helm" and "projectile" and see all the shortcuts assigned to various commands.

*** Helm swoop
Helm swoop allows to quickly search for text under cursor or new text within current file. I am sure you are already using ~C-s~ and ~C-r~ to search within the file. This package compliments rather than replace it. You can quickly type ~js~ to search and jump to the target line. To go back to where you started searching, use ~jp~. You can use ~M-m~ from ~C-s~ and ~C-r~ search to start using helm-swoop as described in below setting.

#+begin_src emacs-lisp
(use-package helm-swoop 
:ensure t
:chords
("js" . helm-swoop)
("jp" . helm-swoop-back-to-last-point)
:init
(bind-key "M-m" 'helm-swoop-from-isearch isearch-mode-map)

;; If you prefer fuzzy matching
(setq helm-swoop-use-fuzzy-match t)

;; Save buffer when helm-multi-swoop-edit complete
(setq helm-multi-swoop-edit-save t)

;; If this value is t, split window inside the current window
(setq helm-swoop-split-with-multiple-windows nil)

;; Split direction. 'split-window-vertically or 'split-window-horizontally
(setq helm-swoop-split-direction 'split-window-vertically)

;; If nil, you can slightly boost invoke speed in exchange for text color
(setq helm-swoop-speed-or-color nil)

;; ;; Go to the opposite side of line from the end or beginning of line
(setq helm-swoop-move-to-line-cycle t)

)
#+end_src

*** Helm tramp
Helm tramp allows ~TRAMP~ autocompletion. 

#+begin_src emacs-lisp
  (use-package helm-tramp :ensure t)
#+end_src

** Avy Goto
   Avy allows you to quickly jump to certain character, word or line within the file. Use ~jc~, ~jw~ or ~jl~ to quickly jump within current file. Change it to other keys, if you feel you are using this set of keys for other purposes. 

#+begin_src emacs-lisp
(use-package avy 
:ensure t
:chords
("jc" . avy-goto-char)
("jw" . avy-goto-word-1)
("jl" . avy-goto-line))
#+end_src

** Which Key
For some prefix commands like ~C-c p~ or ~C-c h~ we want Emacs to visually guide you through the available options. Following package allows us to do that.
#+begin_src emacs-lisp
(use-package which-key 
:ensure t 
:init
(which-key-mode)
)
#+end_src

** Run Code
We can use quickrun package to execute code (if it has main). E.g. If you have a java file with main method, it will run with the associated shortcut key ~C-c r~ or quickrun command. Quickrun has support for several languages.
#+begin_src emacs-lisp
(use-package quickrun 
:ensure t
:bind ("C-c r" . quickrun))
#+end_src

** Magit
A VC plugin that has github integrations
#+begin_src emacs-lisp
  (use-package magit :ensure t)
  ;; (use-package magit-todos
  ;; 	:ensure t
  ;; 	:after magit
  ;; 	:config (magit-todos-mode 1))
  (setenv "TERM" "dumb")
#+end_src

** Envrc

#+begin_src emacs-lisp
  (use-package envrc :ensure t
	:init (envrc-mode))
#+end_src

** vterm

#+begin_src emacs-lisp
  (use-package vterm :ensure t)
  (use-package eshell-vterm :ensure t)
#+end_src

** EMMS

#+begin_src emacs-lisp
  ;; (use-package emms
  ;;   :config
  ;;   (require 'emms-player-mpd)
  ;;   (require 'emms-mpris)
  ;;   (emms-all)
  ;;   (setq emms-player-list emms-player-mpd)
  ;;   (setq emms-info-functions 'emms-info-mpd)
  ;;   (setq emms-change-volume-function 'emms-volume-mpd-change)
  ;;   (fset emms-browser-covers 'emms-browser-cache-thumbnail)
  ;;   (add-to-list 'emms-player-list 'emms-player-mpd))

  ;; (emms-all)
  ;; (emms-default-players)
  ;; (emms-mode-line 1)

  ;; (use-package emms-browser
  ;;   :config
  ;;   (setq emms-browser-covers 'emms-browser-cache-thumbnail)
  ;;   (setq emms-browser-covers-for-first-column 'emms-browser-cache-thumbnail))

  ;; (use-package emms-player-mpd
  ;;   :config
  ;;   (setq emms-player-list '(emms-player-mpd))
  ;;   (setq emms-info-functions '(emms-info-mpd))
  ;;   (setq emms-change-volume-function 'emms-volume-mpd-change)
  ;;   (add-to-list 'emms-player-list 'emms-player-mpd))

#+end_src

** Elcord

#+begin_src emacs-lisp
  (use-package elcord :ensure t)
  (elcord-mode)
#+end_src

** Bitlbee

#+begin_src emacs-lisp
  ;; (when (s-contains? "NixOS" (which-linux-distribution)) (fset 'bitlbee-command-line
  ;; 							     (lambda ()
  ;; 							   ((concat bitlbee-executable " " bitlbee-options " -d " bitlbee-user-directory)))))
  ;; (use-package bitlbee :ensure t)
#+end_src

** Undo history

#+begin_src emacs-lisp
  (use-package undo-tree :ensure t :init (global-undo-tree-mode))
#+end_src

** Skewer

Add skewer mode for a live server

#+begin_src emacs-lisp
  (use-package skewer-mode :ensure t)
  (use-package skewer-reload-stylesheets :ensure t)
#+end_src

** Smart compile

#+begin_src emacs-lisp
  (use-package smart-compile :ensure t)
#+end_src

** Prettier

#+begin_src emacs-lisp
  (use-package prettier :ensure t)
#+end_src

** Tree sitter

#+begin_src emacs-lisp
  ;; (use-package tree-sitter :ensure t)
  ;; (use-package tree-sitter-langs
  ;;   :ensure t
  ;;   :after tree-sitter)

  ;; (setq treesit-language-source-alist
  ;; 	  '((astro "https://github.com/virchau13/tree-sitter-astro")
  ;; 		(css "https://github.com/tree-sitter/tree-sitter-css")
  ;; 		(tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")))

  ;; (use-package treesit-auto
  ;;   :ensure t
  ;;   :config
  ;;   (global-treesit-auto-mode))

  ;; ;; (let ((astro-recipe (make-treesit-auto-recipe
  ;; ;; 					 :lang 'astro
  ;; ;; 					 :ts-mode 'astro-ts-mode
  ;; ;; 					 :url "https://github.com/virchau13/tree-sitter-astro"
  ;; ;; 					 :revision "master"
  ;; ;; 					 :source-dir "src")))
  ;; ;;   (add-to-list 'treesit-auto-recipe-list astro-recipe))
#+end_src

** Doom mode line

#+begin_src emacs-lisp
  ;; (use-package doom-modeline
  ;;       :ensure t
  ;;       :init (doom-modeline-mode 1))
#+end_src

** Minion

#+begin_src emacs-lisp
  ;; (use-package minions
  ;; :ensure t
  ;; :init (minions-mode))
#+end_src

** Org modern

#+begin_src emacs-lisp
  (use-package org-modern
	:ensure t
	:init (global-org-modern-mode))
#+end_src

** Org CDLaTeX

#+begin_src emacs-lisp
		(use-package cdlatex
		  :ensure t
		  :hook (org-mode-hook . turn-on-org-cdlatex))
#+end_src

** SQLPlus

#+begin_src emacs-lisp 
  ;; (require SQLplus)
  (setq sqlplus-connect-string "sys/test@//localhost:1521/xe as sysdba")
#+end_src

** Multiple cursors

#+begin_src emacs-lisp
  (use-package multiple-cursors
	:ensure t
	:bind (("C-S-c C-S-c" . mc/edit-lines)
		   ("C->" . mc/mark-next-like-this)
		   ("C-<" . mc/mark-previous-like-this)
		   ("C-c C-<" . mc/mark-all-like-this)))
#+end_src

** PlatformIO

#+begin_src emacs-lisp
  (use-package platformio-mode
	:ensure t)
#+end_src

** Org roam

#+begin_src emacs-lisp
  (use-package org-roam
	:ensure t
	:custom
	(org-roam-directory (file-truename "~/Documentos/Notas"))
	:bind (("C-c n l" . org-roam-buffer-toggle)
		   ("C-c n f" . org-roam-node-find)
		   ("C-c n g" . org-roam-graph)
		   ("C-c n i" . org-roam-node-insert)
		   ("C-c n c" . org-roam-capture)
		   ;; Dailies
		   ("C-c n j" . org-roam-dailies-capture-today))
	:config
	;; If you're using a vertical completion framework, you might want a more informative completion interface
	(setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
	(org-roam-db-autosync-mode)
	;; If using org-roam-protocol
	(require 'org-roam-protocol))
#+end_src

** Eshell syntax highlight

#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after eshell-mode
    :ensure t ;; Install if not already installed.
    :config
    ;; Enable in all Eshell buffers.
    (eshell-syntax-highlighting-global-mode +1))
#+end_src

* Language Server Protocol (LSP)
  With above setup done, below we will setup several packages closely related to LSP.

** Company
Complete anything aka Company provides auto-completion. Company-capf is enabled by default when you start LSP on a project. You can also invoke ~M-x company-capf~ to enable capf (completion at point function).
#+begin_src emacs-lisp
  (use-package company :ensure t :init (global-company-mode))
#+end_src

** Yasnippet
Yasnippet is a template system for Emacs. It allows you to type abbreviation and complete the associated text.

#+begin_src emacs-lisp
(use-package yasnippet :config (yas-global-mode))
(use-package yasnippet-snippets :ensure t)
#+end_src

E.g. In java mode, if you type ~pr~ and hit ~<TAB>~ it should complete to ~System.out.println("text");~

To create a new snippet you can use ~yas-new-snippet~ command. 

** FlyCheck
FlyCheck checks for errors in code at run-time.
#+begin_src emacs-lisp
  (use-package flycheck :ensure t :init (global-flycheck-mode))
  (setq ispell-default-dicctionary "es")
#+end_src

** Dap Mode
Emacs Debug Adapter Protocol aka DAP Mode allows us to debug your program. Below we will integrate ~dap-mode~ with ~dap-hydra~. ~Dap-hydra~ shows keys you can use to enable various options and jump through code at runtime. After we install dap-mode we will also install ~dap-java~.

#+begin_src emacs-lisp
  (use-package dap-mode
	:ensure t
	:after (lsp-mode)
	:functions dap-hydra/nil
	:config
	(require 'dap-java)
	:bind (:map lsp-mode-map
		   ("<f5>" . dap-debug)
		   ("M-<f5>" . dap-hydra))
	:hook ((dap-mode . dap-ui-mode)
	  (dap-session-created . (lambda (&_rest) (dap-hydra)))
	  (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

  (use-package dap-java :ensure nil)
#+end_src

** Treemacs
Treemacs provides UI elements used for LSP UI. Let's install lsp-treemacs and its dependency treemacs. We will also Assign ~M-9~ to show error list.
#+begin_src emacs-lisp
  (use-package lsp-treemacs
	:after (lsp-mode treemacs)
	:ensure t
	:commands lsp-treemacs-errors-list
	:bind (:map lsp-mode-map
		   ("M-9" . lsp-treemacs-errors-list)))
  (use-package treemacs-projectile
	:ensure t
	:after (treemacs))

  (use-package treemacs-magit
	:ensure t
	:after (treemacs))

  (use-package treemacs-all-the-icons
	:ensure t
	:after (treemacs))

  (use-package treemacs
	:ensure t
	:commands (treemacs)
	:after (lsp-mode))
#+end_src

** LSP UI
LSP UI is used in various packages that require UI elements in LSP. E.g. ~lsp-ui-flycheck-list~ opens a windows where you can see various coding errors while you code. You can use ~C-c l T~ to toggle several UI elements. We have also remapped some of the xref-find functions, so that we can easily jump around between symbols using ~M-.~, ~M-,~ and ~M-?~ keys.

#+begin_src emacs-lisp
(use-package lsp-ui
:ensure t
:after (lsp-mode)
:bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references))
:init (setq lsp-ui-doc-delay 1.5
      lsp-ui-doc-position 'bottom
	  lsp-ui-doc-max-width 100
))
#+end_src

Go through this [[https://github.com/emacs-lsp/lsp-ui/blob/master/lsp-ui-doc.el][link]]  to see what other parameters are provided.

** Helm LSP
Helm-lsp provides various functionality to work with the code. E.g. Code actions like adding *getter, setter, toString*, refactoring etc. You can use ~helm-lsp-workspace-symbol~ to find various symbols (classes) within your workspace.

LSP's built in symbol explorer uses ~xref-find-apropos~ to provide symbol navigation. Below we will replace that with helm version. After that you can use ~C-c l g a~ to find workspace symbols in a more intuitive way.

#+begin_src emacs-lisp
(use-package helm-lsp
:ensure t
:after (lsp-mode)
:commands (helm-lsp-workspace-symbol)
:init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+end_src

** Install LSP Package
Let's install the main package for lsp. Here we will integrate lsp with which-key. This way, when we type the prefix key ~C-c l~ we get additional help for completing the command. 

#+begin_src emacs-lisp
  (use-package lsp-mode
  :ensure t
  :hook (
	 (lsp-mode . lsp-enable-which-key-integration)
	 (java-mode . #'lsp-deferred)
	 (latex-mode . #'lsp-deferred)
	 (gdscript-mode . #'lsp-deferred)
	 (css-mode . #'lsp-deferred)
  )
  :init (setq 
	  lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
	  lsp-enable-file-watchers nil
	  read-process-output-max (* 1024 1024)  ; 1 mb
	  lsp-completion-provider :capf
	  lsp-idle-delay 0.500
  )
  :config 
	  (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
	  (with-eval-after-load 'lsp-intelephense
	  (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
	  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
  )
#+end_src

You can start LSP server in a java project by using ~C-c l s s~. Once you type ~C-c l~ ~which-key~ package should guide you through rest of the options. In above setting I have added some memory management settings as suggested in [[https://emacs-lsp.github.io/lsp-mode/page/performance/][this guide]]. Change them to higher numbers, if you find *lsp-mode* sluggish in your computer.

** DAP mode

#+begin_src emacs-lisp 
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
#+end_src

** LSP Java
This is the package that handles server installation and session management.
#+begin_src  emacs-lisp
  (use-package lsp-java 
  :ensure t
  :config (add-hook 'java-mode-hook 'lsp))
  (setq lsp-java-workspace-dir "/home/ivvil/Documentos/Eclipse")
  (require 'dap-java)
#+end_src

* Other languages
Pakcages for other languages and hooks

** HTML

#+begin_src emacs-lisp
  (add-hook 'html-mode-hook 'lsp)
#+end_src

*** Frameworks

**** SvelteKit

#+begin_src emacs-lisp 
  (use-package svelte-mode :ensure t)
#+end_src

**** Astro

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t)

  ;; ASTRO
  (define-derived-mode astro-mode web-mode "astro")
  (setq auto-mode-alist
        (append '((".*\\.astro\\'" . astro-mode))
                auto-mode-alist))
#+end_src

** JavaScript

#+begin_src emacs-lisp
  (add-hook 'js-mode-hook 'lsp)
  (use-package typescript-mode :ensure t)

  (require 'ob-js)

  (add-to-list 'org-babel-load-languages '(js . t))
  (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
  (add-to-list 'org-babel-tangle-lang-exts '("js" . "js"))
#+end_src

*** JSDoc

#+begin_src emacs-lisp
  (use-package jsdoc
	:ensure t)
#+end_src

*** Typescript

#+begin_src emacs-lisp
  (use-package ob-typescript
	:ensure t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((typescript . t)
	 ))

  (setq org-babel-command:typescript "npx -p typescript -- tsc")
#+end_src


Adding better ~JSON~ mode

#+begin_src emacs-lisp
  (use-package json-mode :ensure t)
#+end_src

** CSS

#+begin_src emacs-lisp
  (add-hook 'scss-mode-hook
			(lambda () ((skewer-reload-stylesheets-reload-on-save)(skewer-reload-stylesheets-start-editing))))
#+end_src

** Lisp

*** Common Lisp

#+begin_src emacs-lisp
  (use-package sly :ensure t)
  (setq inferior-lisp-program "sbcl")
  (add-hook 'common-lisp-hook 'company-mode)
#+end_src

*** Scheme

**** Guile

#+begin_src emacs-lisp
  (use-package geiser-guile :ensure t)
  (use-package ac-geiser :ensure t)  
#+end_src

** Latex

#+begin_src emacs-lisp
  (use-package auctex :ensure t :hook (latex-mode . acutex-mode))
  (use-package company-auctex :ensure t)
  (use-package auto-complete-auctex :ensure t)
  (setq-default TeX-engine 'xetex)
#+end_src

** Marklses

#+begin_src emacs-lisp
  (use-package markless
	:ensure t)
#+end_src

** Nix

#+begin_src emacs-lisp
  (use-package nix-mode :ensure t :hook (nix-mode . lsp-deferred))
  (with-eval-after-load 'lsp-mode
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "nixd")
                      :major-modes '(nix-mode)
                      :priority 0
                      :server-id 'nixd)))
  (setf lsp-nixd-formatting-command ["alejandra"])
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rust-mode :ensure t :hook ((rust-mode . cargo-minor-mode)
										  (rust-mode . lsp)))
  (use-package flycheck-rust
	:ensure t)
  (with-eval-after-load 'rust-mode
	(add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src

** GDScript

#+begin_src emacs-lisp
  (use-package gdscript-mode :ensure t)
#+end_src

** C/C++

#+begin_src emacs-lisp
  ;; (use-package ccls
  ;;   :hook ((c-mode c++-mode objc-mode cuda-mode) .
  ;;          (lambda () (require 'ccls) (lsp))))

  (setq lsp-disabled-clients '(ccls))

  (require 'dap-lldb)
  (require 'dap-cpptools)
  (require 'dap-gdb-lldb)
#+end_src

** C#

#+begin_src emacs-lisp
  (add-hook 'csharp-mode-hook 'lsp)
#+end_src

** PHP

#+begin_src emacs-lisp 
  (use-package php-mode
    :ensure t)
#+end_src

* EXWM

* TESTING

** Corfu

Testing corfu setup

#+begin_src emacs-lisp 
   ;;  ;;;; Code Completion

  ;; (use-package corfu
  ;;   ;; Optional customizations
  ;;   :custom
  ;;   (corfu-cycle t)                 ; Allows cycling through candidates
  ;;   (corfu-auto t)                  ; Enable auto completion
  ;;   (corfu-auto-prefix 2)
  ;;   (corfu-auto-delay 0.3)
  ;;   (corfu-popupinfo-delay '(0.5 . 0.2))
  ;;   (corfu-preview-current 'insert) ; insert previewed candidate
  ;;   (corfu-preselect 'prompt)
  ;;   (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets

  ;;   ;; Optionally use TAB for cycling, default is `corfu-complete'.
  ;;   :bind (:map corfu-map
  ;; 			  ("M-SPC"      . corfu-insert-separator)
  ;; 			  ("TAB"        . corfu-next)
  ;; 			  ([tab]        . corfu-next)
  ;; 			  ("S-TAB"      . corfu-previous)
  ;; 			  ([backtab]    . corfu-previous)
  ;; 			  ("S-<return>" . corfu-insert)
  ;; 			  ("RET"        . nil))

  ;;   :init
  ;;   (global-corfu-mode)
  ;;   (corfu-history-mode)
  ;;   (corfu-popupinfo-mode) ; Popup completion info
  ;;   :config
  ;;   (add-hook 'eshell-mode-hook
  ;; 			(lambda () (setq-local corfu-quit-at-boundary t
  ;; 								   corfu-quit-no-match t
  ;; 								   corfu-auto nil)
  ;; 			  (corfu-mode))))


#+end_src

** EAF

#+begin_src emacs-lisp
  ;; (use-package eaf
  ;;   :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  ;;   :custom
  ;; 										; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  ;;   (eaf-browser-continue-where-left-off t)
  ;;   (eaf-browser-enable-adblocker t)
  ;;   (browse-url-browser-function 'eaf-open-browser)
  ;;   :config
  ;;   (defalias 'browse-web #'eaf-open-browser)
  ;;   (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  ;;   (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  ;;   (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  ;;   (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki

  ;; (require 'eaf-browser)
  ;; (require 'eaf-pdf-viewer)
  ;; (require 'eaf-music-player)
  ;; (require 'eaf-video-player)
  ;; (require 'eaf-js-video-player)
  ;; (require 'eaf-image-viewer)
  ;; (require 'eaf-rss-reader)
  ;; (require 'eaf-terminal)
  ;; (require 'eaf-markdown-previewer)
  ;; (require 'eaf-org-previewer)
  ;; (require 'eaf-camera)
  ;; (require 'eaf-git)
  ;; (require 'eaf-file-manager)
  ;; (require 'eaf-mindmap)
  ;; (require 'eaf-netease-cloud-music)
  ;; (require 'eaf-system-monitor)
  ;; (require 'eaf-file-browser)
  ;; (require 'eaf-file-sender)
  ;; (require 'eaf-airshare)
  ;; (require 'eaf-jupyter)
  ;; (require 'eaf-2048)
  ;; (require 'eaf-markmap)
  ;; (require 'eaf-map)
  ;; (require 'eaf-demo)
  ;; (require 'eaf-vue-demo)
  ;; (require 'eaf-vue-tailwindcss)
  ;; (require 'eaf-pyqterminal)
#+end_src

* Conclusion
Go through [[https://github.com/emacs-lsp/lsp-java#supported-commands][Supported commands]] section of lsp-java github page to see commands provided in lsp-mode. Most of these commands are available under lsp's ~C-c l~ option. I hope this configuration file was useful.
